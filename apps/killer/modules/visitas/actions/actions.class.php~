<?php

/**
 * visitas actions.
 *
 * @package    killer
 * @subpackage visitas
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 23810 2009-11-12 11:07:44Z Kris.Wallsmith $
 */
class visitasActions extends sfActions
{
 /**
  * Executes index action
  *
  * @param sfRequest $request A request object
  */
  public function executeIndex(sfWebRequest $request)
  {
    $this->jugadores = KillJugadoresPeer::doSelect(new Criteria());
  }
  
  public function executeFichaAjax(sfWebRequest $request)
  {
    $this->jugador = KillJugadoresPeer::retrieveByPK($request->getParameter('id',null));
    $this->setLayout(false);
  }
  
  public function executeRegistro(sfWebRequest $request)
  {
      if(time() >= strtotime('7 November 2012'))
        $this->redirect('visitas/index');

      $criteria = new Criteria();
      $this->departamentos = KillDepartamentosPeer::doSelect($criteria);
      
      $this->aviso = $this->getUser()->getFlash('notice');
  }

  public function executeRegistrado(sfWebRequest $request)
  {
    $nombre = $request->getParameter('nombre');
    if(empty($nombre)) 
    {
        $this->getUser()->setFlash('notice','El nombre es obligatorio');
        $this->redirect('visitas/registro');
    }
        
    $departamento = $request->getParameter('departamento');
    if(empty($departamento)) 
    {
        $this->getUser()->setFlash('notice','El departamento es obligatorio');
        $this->redirect('visitas/registro');
    }
    
    $alias = $request->getParameter('alias');
    if(empty($alias)) 
    {
        $this->getUser()->setFlash('notice','El alias es obligatorio');
        $this->redirect('visitas/registro');
    }
    
    $biografia = $request->getParameter('biografia');
    if(empty($biografia)) 
    {
        $this->getUser()->setFlash('notice','La biografía es obligatoria');
        $this->redirect('visitas/registro');
    }
    
    $usuario = $request->getParameter('usuario');
    if(empty($usuario)) 
    {
        $this->getUser()->setFlash('notice','El usuario es obligatorio');
        $this->redirect('visitas/registro');
    }
    
    $contrasena = $request->getParameter('contrasena');
    if(empty($contrasena)) 
    {
        $this->getUser()->setFlash('notice','La contraseña es obligatoria');
        $this->redirect('visitas/registro');
    }
    
    $contrasena2 = $request->getParameter('contrasena2');
    if(empty($contrasena2)) 
    {
        $this->getUser()->setFlash('notice','La contraseña es obligatoria');
        $this->redirect('visitas/registro');
    }
    if(($contrasena2 != $contrasena)) 
    {
        $this->getUser()->setFlash('notice','Las contraseñas no coinciden');
        $this->redirect('visitas/registro');
    }
    
    $email = $request->getParameter('email');
    if(empty($email)) 
    {
        $this->getUser()->setFlash('notice','El email es obligatorio');
        $this->redirect('visitas/registro');
    }
    
    
    $fileName = $request->getFiles('foto');
    //print_r($fileName);exit;

    $fileSize = $fileName['size'];
    if($fileSize <= 0)
    {
        $this->getUser()->setFlash('notice','La foto es obligatoria');
        $this->redirect('visitas/registro');
    }
    
    switch($fileName['type'])
    {
      case 'image/jpeg':
        $ext = 'jpg';
        break;
      case 'image/png':
        $ext = 'png';
        break;
      case 'image/gif':
        $ext = 'gif';
        break;
      default: 
        $this->getUser()->setFlash('notice','La foto debe tener extensión jpg, gif o png');
        $this->redirect('visitas/registro');
        break;
    }
    
    if($fileSize > 100000)
    {
        $this->getUser()->setFlash('notice','La foto no puede superar los 100 KB');
        $this->redirect('visitas/registro');
    }
    
    $fileType = $fileName['type'];
    $theFileName = $fileName['name'];
    $uploadDir = sfConfig::get("sf_web_dir");
    $fotosDir = $uploadDir.'/images/fotos';

    if(!is_dir($fotosDir))
        mkdir($fotosDir, 0777);            

    //Comprobar que el usuario no está repetido
    $c = new Criteria();
    $c->add(KillJugadoresPeer::USUARIO,$usuario);
    $jugador = KillJugadoresPeer::doSelectOne($c);
    if($jugador instanceof KillJugadores)
    {
        $this->getUser()->setFlash('notice','Ese nombre de usuario ya existe.');
        $this->redirect('visitas/registro');
    }

    //Comprobar que el alias no está repetido
    $c = new Criteria();
    $c->add(KillJugadoresPeer::ALIAS,$alias);
    $jugador = KillJugadoresPeer::doSelectOne($c);
    if($jugador instanceof KillJugadores)
    {
        $this->getUser()->setFlash('notice','Ese alias ya existe.');
        $this->redirect('visitas/registro');
    }


    $jugador_nuevo = new KillJugadores();
    $jugador_nuevo->setNombre($nombre);
    $jugador_nuevo->setIdDepartamento($departamento);
    $jugador_nuevo->setAlias($alias);
    $jugador_nuevo->setDescripcion($biografia);
    $jugador_nuevo->setUsuario($usuario);
    $jugador_nuevo->setContrasena(md5($contrasena));
    $jugador_nuevo->setEmail($email);
   
    $jugador_nuevo->setActivo(1);    
    $jugador_nuevo->save();
    
    $idjugador = $jugador_nuevo->getId();
    
    move_uploaded_file($fileName['tmp_name'], "$fotosDir/foto$idjugador.$ext");
    $jugador_nuevo->setFoto("foto$idjugador.$ext");
    $jugador_nuevo->save();
  }

  public function executeBlog(sfWebRequest $request)
  {
    $criteria = new Criteria();
    $criteria->addDescendingOrderByColumn(KillNoticiasPeer::ID);
    $this->noticias = KillNoticiasPeer::doSelect($criteria);
  }
  
  public function executeComentar(sfWebRequest $request)
  {
    $texto = $request->getParameter('texto');
    if(!empty($texto))
    {
      $noticia = KillNoticiasPeer::retrieveByPK($request->getParameter('id_noticia',null));
      if($noticia instanceof KillNoticias)
      {
        $comentario = new KillComentarios();
        $comentario->setTexto($texto);
        $noticia->addKillComentarios($comentario);
        $noticia->save();
      }
    }
    $this->redirect('visitas/blog');
  }

  public function executeNormas(sfWebRequest $request)
  {

  }
  
  public function executeLogin(sfWebRequest $request)
  {
    $usuario = $request->getParameter('username',null);
    if(empty($usuario)) 
    {
      $this->redirect('visitas/index');
    }

    $password = $request->getParameter('password',null);
    if(empty($password)) 
    {
      $this->redirect('visitas/index');
    }

    $c = new Criteria();
    $c->add(KillJugadoresPeer::USUARIO,$usuario);
    $jugador = KillJugadoresPeer::doSelectOne($c);
    if(!($jugador instanceof KillJugadores))
    {
      $this->redirect('visitas/index');
    }


    if(md5($password)==$jugador->getContrasena())  
    {
      $this->getUser()->setAuthenticated(true);
      $this->getUser()->setAttribute('user_id',$jugador->getId());
      $this->redirect('juego/index');
    }
    else
    {
      $this->getUser()->setAuthenticated(false);
      $this->redirect('visitas/index');
    }
  }
  
}
