<?php


/**
 * Skeleton subclass for representing a row from the 'hl_jugadores' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Nov 20 21:36:25 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class HlJugadores extends BaseHlJugadores {

	/**
	 * Initializes internal state of HlJugadores object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}
  
  public function __toString()
  {
    return $this->getNombre()." (".$this->getHlDepartamentos()->getDepartamento().")";
  }
  
  public function esHombrelobo()
  {
    return $this->getHombrelobo() > 0;
  }
  
  public function esAlcalde()
  {
    return $this->getAlcalde() > 0;
  }
  
  public function esVidente()
  {
    return $this->getVidente() > 0;
  }
  
  public function estaEnamorado()
  {
    return $this->getEnamorado() > 0;
  }
  
  public function getAmante()
  {
    if($this->getEnamorado() > 0)
    {
      $c = new Criteria();
      $c->add(HlJugadoresPeer::ENAMORADO,$this->getEnamorado());
      $c->add(HlJugadoresPeer::ID,$this->getId(),CRITERIA::NOT_EQUAL);
      $pareja = HlJugadoresPeer::doSelectOne($c);
      if($pareja instanceof HlJugadores) 
        return $pareja;
    }
    
    return $this; //Nunca debería llegar aquí
  }
  
  public function esCazador()
  {
    return $this->getCazador() > 0;
  }
  
  public function esBruja()
  {
    return $this->getBruja() > 0;
  }
  
  public function esGuardaespaldas()
  {
    return $this->getGuardaespaldas() > 0;
  }
  
  public function esEndemoniado()
  {
    return $this->getEndemoniado() > 0;
  }
  
  public function esHipnotizador()
  {
    return $this->getHipnotizador() > 0;
  }
  
  public function proteger($protegido)
  {
    //Desproteger al protegido anterior
    $this->desproteger();
    
    //Proteger al nuevo (Se marca el número de guardaespaldas por si hubiera más de uno)
    $protegido->setProtegido($this->getGuardaespaldas());
    $protegido->save();
  }
  
  public function desproteger()
  {
    //Desproteger al protegido anterior
    $criteria = new Criteria();
    $criteria->add(HlJugadoresPeer::PROTEGIDO,$this->getGuardaespaldas());
    $protegidos = HlJugadoresPeer::doSelect($criteria);
    foreach($protegidos as $protegido)
    {
      $protegido->setProtegido(0);
      $protegido->save();
    }
    
  }
  
  public function estaProtegido()
  {
    return $this->getProtegido() > 0;
  }
  
  public function hipnotizar(HLJugadores $victima)
  {
    //Deshipnotizar al hipnotizado anterior
    $this->deshipnotizar();
    
    //Hipnotizar al nuevo (Se marca el número de guardaespaldas por si hubiera más de uno)
    $victima->setHipnotizado($this->getHipnotizador());
    $victima->save();
  }
  
  public function deshipnotizar()
  {
    //Desproteger al protegido anterior
    $criteria = new Criteria();
    $criteria->add(HlJugadoresPeer::HIPNOTIZADO,$this->getHipnotizador());
    $victimas = HlJugadoresPeer::doSelect($criteria);
    foreach($victimas as $victima)
    {
      $victima->setHipnotizado(0);
      $victima->save();
    }
  }
  
  public function estaHipnotizado()
  {
    return $this->getHipnotizado() > 0;
  }
  
  public function estaEnfermo()
  {
    return $this->getEnfermo() > 0;
  }
  
  public function muere()
  {
    $this->setActivo(0);
    $this->save();
    Juego::registraEvento($this->getNombre().' muere.');
    
    if($this->esHombrelobo()) 
    {
      Juego::registraEvento($this->getNombre().' era: licántropo.');
    } 
    if($this->esBruja()) 
    {
      Juego::registraEvento($this->getNombre().' era: Bruja.');
    } 
    if($this->esVidente()) 
    {
      Juego::registraEvento($this->getNombre().' era: Vidente.');
    } 
    if($this->esCazador()) 
    {
      Juego::registraEvento($this->getNombre().' era: Cazador.');
      $this->setAccion(1);
      $this->save();
    } 
    if($this->estaEnamorado()) 
    {
      Juego::registraEvento($this->getNombre().' era: Enamorado.');
      $amante = $this->getAmante();
      if($amante->getActivo()==1)
      {
        Juego::registraEvento($amante->getNombre().' estaba enamorado de '.$this->getNombre(). ' y ha muerto de pena.');
        $amante->muere();
      }
    } 
    if($this->esAlcalde()) 
    {
      Juego::registraEvento($this->getNombre().' era: Acalde.');
      $this->setAlcalde(0);
      Juego::sortearAlcalde();
      $this->save();
    } 
    if($this->esEndemoniado()) 
    {
      Juego::registraEvento($this->getNombre().' era: Endemoniado.');
    } 
    if($this->esGuardaespaldas()) 
    {
      Juego::registraEvento($this->getNombre().' era: Guardaespaldas.');
      $this->desproteger();
    } 
    if($this->esHipnotizador()) 
    {
      Juego::registraEvento($this->getNombre().' era: Hipnotizador.');
      $this->deshipnotizar();
    } 
    
  }
  
  public function revive()
  {
    $this->setActivo(1);
    $this->save();
    Juego::registraEvento($this->getNombre().' vuelve a la vida.');
  }
  
  public function informarRoles()
  {
    $roles = array();
    if($this->esAlcalde()) $roles[] = "es Alcalde";
    if($this->esBruja()) $roles[] = "es Bruja";
    if($this->esCazador()) $roles[] = "es Cazador";
    if($this->esHombrelobo()) $roles[] = "es Hombre Lobo";
    if($this->esGuardaespaldas()) $roles[] = "es Guardaespaldas";
    if($this->esEndemoniado()) $roles[] = "es Endemoniado";
    if($this->esHipnotizador()) $roles[] = "es Hipnotizador";
    if($this->esVidente()) $roles[] = "es Vidente";
    if($this->estaEnamorado()) $roles[] = "está Enamorado de ".$this->getAmante()->getNombre();
    if($this->estaEnfermo()) $roles[] = "está Enfermo";
    
    if(count($roles)==0) return "Este jugador no tiene ningún rol.";
    else return "Este jugador ". implode(',', $roles);
  }
  
  public function getVotoRonda($ronda)
  {
    $criteria = new Criteria();
    $criteria->add(HlVotosPeer::ID_RONDA,$ronda);
    $votos = $this->getHlVotossRelatedByIdJugador($criteria);
    if(count($votos)>0) return $votos[0]->getIdVictima();
    else return 0;
  }
  
  
  
 
        

} // HlJugadores
